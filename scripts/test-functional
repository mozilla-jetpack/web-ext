#!/usr/bin/env node

const path = require('path');

const shell = require('shelljs');
const tmp = require('tmp');

const config = require('./lib/config');
const {mochaFunctional} = require('./lib/mocha');

shell.set('-e');

const testProductionMode = process.env.TEST_PRODUCTION_MODE === '1';
const testLegacyBundling = process.env.TEST_LEGACY_BUNDLING === '1';

let execMochaOptions = {};

shell.exec('npm run build', testProductionMode ? {
  env: {
    ...process.env,
    NODE_ENV: 'production',
  },
} : {});

if (testProductionMode) {
  const destDir = tmp.tmpNameSync();
  const packageDir = tmp.tmpNameSync();
  const npmInstallOptions = ['--production'];

  if (testLegacyBundling) {
    shell.echo('\nTest in "npm legacy bundling mode"');
    npmInstallOptions.push('--legacy-bundling');
  }

  execMochaOptions = {
    env: {
      ...process.env,
      TEST_WEB_EXT_BIN: path.join(destDir, 'node_modules', 'web-ext', 'bin', 'web-ext'),
    },
  };

  shell.echo('\nPreparing web-ext production mode environment...\n');
  shell.rm('-rf', destDir, packageDir);
  shell.mkdir('-p', destDir, packageDir);
  shell.cp('-rf', config.copy.productionModeAssets.src, packageDir);
  shell.pushd(destDir);
  shell.exec(`npm install ${npmInstallOptions.join(' ')} ${packageDir}`);
  shell.popd();
  shell.echo('\nProduction mode environment successfully created.\n');
}

let ok = mochaFunctional(execMochaOptions);

// Try to re-run the functional tests once more if they fails on a travis windows worker (#1510).
if (!ok && process.env.TRAVIS_OS_NAME === 'windows') {
  console.log('*** Functional tests failure on a travis window worker, trying to re-run once more...');
  ok = mochaFunctional(execMochaOptions);
}

process.exit(ok ? 0 : 1);
